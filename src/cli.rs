use clap::{App, Arg, AppSettings, ArgSettings, crate_version, crate_authors};

pub fn build_cli() -> App<'static> {
    App::new("flavours")
        .about("A simple way to manage and use base16 standard schemes and templates")
        .version(crate_version!())
        .author(crate_authors!())
        .setting(AppSettings::GlobalVersion)
        .setting(AppSettings::UnifiedHelpMessage)
        .setting(AppSettings::DisableHelpSubcommand)
        .setting(AppSettings::InferSubcommands)
        .arg(
            Arg::with_name("verbose")
            .about("Be more verbose")
            .long("verbose")
            .short('v')
        )
        .arg(
            Arg::with_name("completions")
            .setting(ArgSettings::Hidden)
            .about("Generates completion for given shell, outputs to stdout")
            .long("completions")
            .takes_value(true)
            .possible_values(&["bash", "elvish", "fish", "powershell", "zsh"])
        )
        .subcommand(
            App::new("current")
                .about("Prints last applied scheme name")
                .setting(AppSettings::UnifiedHelpMessage)
                .setting(AppSettings::DisableHelpSubcommand)
                .setting(AppSettings::DisableVersion)
        )
        .subcommand(
            App::new("list")
                .about("Prints a list with all installed schemes")
                .setting(AppSettings::UnifiedHelpMessage)
                .setting(AppSettings::DeriveDisplayOrder)
                .setting(AppSettings::DisableHelpSubcommand)
                .arg(
                    Arg::with_name("pattern")
                        .about("Optionally, specify a pattern (glob) to only show matching schemes.")
                        .multiple(true)
                )
                .arg(
                    Arg::with_name("lines")
                        .about("Print each scheme on its own line")
                        .long("lines")
                        .short('l')
                )
        )
        .subcommand(
            App::new("info")
                .about("Shows info on a scheme, or list of schemes")
                .setting(AppSettings::UnifiedHelpMessage)
                .setting(AppSettings::DeriveDisplayOrder)
                .setting(AppSettings::DisableHelpSubcommand)
                .arg(
                    Arg::with_name("scheme")
                        .about("Scheme(s) name(s) to display information. Use together with list subcommand if you want all schemes or glob matching")
                        .multiple(true)
                )
        )        
        .subcommand(
            App::new("apply")
                .about("Applies scheme, according to configuration")
                .setting(AppSettings::UnifiedHelpMessage)
                .setting(AppSettings::DeriveDisplayOrder)
                .setting(AppSettings::DisableHelpSubcommand)
                .arg(
                    Arg::with_name("scheme")
                        .about("Applies specified scheme, using templates and locations specified in the configuration file. If more than one scheme is specified, picks one of them at random. Use together with list subcommand if you want all schemes or glob matching.")
                        .multiple(true)
                )
        )
        .subcommand(
            App::new("update")
                .about("Downloads schemes, templates, or updates their lists")
                .setting(AppSettings::UnifiedHelpMessage)
                .setting(AppSettings::DeriveDisplayOrder)
                .setting(AppSettings::DisableHelpSubcommand)
                .arg(
                    Arg::with_name("operation")
                        .value_name("operation")
                        .about("Update sources lists from repositories or (re)download schemes/templates specified in the lists. Default repositories for lists, and the lists themselves, can be manually changed.")
                        .required(true)
                        .possible_values(&["lists", "schemes", "templates", "all"])
                )
        )
}

